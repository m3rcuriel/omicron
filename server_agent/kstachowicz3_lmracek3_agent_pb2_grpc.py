# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import kstachowicz3_lmracek3_agent_pb2 as agent__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class RemoteAgentStub(object):
  """
  The remote agent is defined as a gRPC service to handle each stage of the
  game. these remote calls mirror the calls in the local agent implementations.

  Those calls which do not require a return will return an empty message.

  Anyone wishing to extend this service must simply add a Request and Reply
  and implement the call on the client and on the server.

  The python files can be generated according to the instructions which can be
  found online or in the README, but for reference the implementation posted
  was generated with:
  `python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=.
  agent.proto`

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.HandleGameStart = channel.unary_unary(
        '/agent.RemoteAgent/HandleGameStart',
        request_serializer=agent__pb2.HandleGameStartRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.HandleOpponentMove = channel.unary_unary(
        '/agent.RemoteAgent/HandleOpponentMove',
        request_serializer=agent__pb2.HandleOpponentMoveRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.ChooseSense = channel.unary_unary(
        '/agent.RemoteAgent/ChooseSense',
        request_serializer=agent__pb2.ChooseSenseRequest.SerializeToString,
        response_deserializer=agent__pb2.ChooseSenseReply.FromString,
        )
    self.HandleSenseResult = channel.unary_unary(
        '/agent.RemoteAgent/HandleSenseResult',
        request_serializer=agent__pb2.HandleSenseResultRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.ChooseMove = channel.unary_unary(
        '/agent.RemoteAgent/ChooseMove',
        request_serializer=agent__pb2.ChooseMoveRequest.SerializeToString,
        response_deserializer=agent__pb2.ChooseMoveReply.FromString,
        )
    self.HandleMoveResult = channel.unary_unary(
        '/agent.RemoteAgent/HandleMoveResult',
        request_serializer=agent__pb2.HandleMoveResultRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.HandleGameEnd = channel.unary_unary(
        '/agent.RemoteAgent/HandleGameEnd',
        request_serializer=agent__pb2.HandleGameEndRequest.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class RemoteAgentServicer(object):
  """
  The remote agent is defined as a gRPC service to handle each stage of the
  game. these remote calls mirror the calls in the local agent implementations.

  Those calls which do not require a return will return an empty message.

  Anyone wishing to extend this service must simply add a Request and Reply
  and implement the call on the client and on the server.

  The python files can be generated according to the instructions which can be
  found online or in the README, but for reference the implementation posted
  was generated with:
  `python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=.
  agent.proto`

  """

  def HandleGameStart(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HandleOpponentMove(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ChooseSense(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HandleSenseResult(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ChooseMove(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HandleMoveResult(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HandleGameEnd(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RemoteAgentServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'HandleGameStart': grpc.unary_unary_rpc_method_handler(
          servicer.HandleGameStart,
          request_deserializer=agent__pb2.HandleGameStartRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'HandleOpponentMove': grpc.unary_unary_rpc_method_handler(
          servicer.HandleOpponentMove,
          request_deserializer=agent__pb2.HandleOpponentMoveRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'ChooseSense': grpc.unary_unary_rpc_method_handler(
          servicer.ChooseSense,
          request_deserializer=agent__pb2.ChooseSenseRequest.FromString,
          response_serializer=agent__pb2.ChooseSenseReply.SerializeToString,
      ),
      'HandleSenseResult': grpc.unary_unary_rpc_method_handler(
          servicer.HandleSenseResult,
          request_deserializer=agent__pb2.HandleSenseResultRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'ChooseMove': grpc.unary_unary_rpc_method_handler(
          servicer.ChooseMove,
          request_deserializer=agent__pb2.ChooseMoveRequest.FromString,
          response_serializer=agent__pb2.ChooseMoveReply.SerializeToString,
      ),
      'HandleMoveResult': grpc.unary_unary_rpc_method_handler(
          servicer.HandleMoveResult,
          request_deserializer=agent__pb2.HandleMoveResultRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'HandleGameEnd': grpc.unary_unary_rpc_method_handler(
          servicer.HandleGameEnd,
          request_deserializer=agent__pb2.HandleGameEndRequest.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'agent.RemoteAgent', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
